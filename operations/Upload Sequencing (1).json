{"name":"Upload Sequencing","category":"Cloning","deployed":false,"on_the_fly":false,"field_types":[{"role":"input","name":"DNA","sample_types":["Plasmid"],"object_types":["Sequencing Stripwell"],"part":true,"array":false}],"protocol":"# This is a default, one-size-fits all protocol that shows how you can \n# access the inputs and outputs of the operations associated with a job.\n# Add specific instructions for this protocol!\n\n# TODO: CHANGE INPUT TYPE TO SEQUENCING STRIPWELL\n\nclass Protocol\n  \n  def finish_protocol\n    operations.store(io: \"input\")\n              .store(io: \"output\") \n    \n    return {}\n  end\n\n  def main\n\n    operations.retrieve\n\n    input_name = \"DNA\"\n    output_name = input_name\n    \n    # TODO: setup dummy data for DEBUG\n        # Dummy data for debug mode\n        if 1==1 #debug\n          operations.each do |op| \n            op.set_input_data input_name, :tracking_num, rand(600)\n            # op.set_input_data input_name, :item_number, rand(600)\n            # op.set_input_data input_name, :primer, rand(600)\n          end\n        end\n        \n    # TODO: collect tracking numbers\n        # Collect tracking numbers\n        num_to_op_hash = {}\n        tracking_nums = operations.map do |op|\n          t = op.input_data(input_name, :tracking_num)\n          num_to_op_hash[\"#{t}\".to_sym] = op\n          t\n        end.uniq\n    \n    # TODO: login to website and check if tracking numbers are ready\n        sequencing_results = show do\n          title \"Check if Sequencing results arrived\"\n          \n          note \"In this protocol, you will upload the sequencing data for the following. \"\n          table operations.start_table\n            .input_item(input_name)\n            .input_sample(input_name)\n            .custom_column(heading: \"Tracking Number\") { |op| op.input_data input_name, :tracking_num }\n            .end_table\n          \n          check \"Go the <a href='https://clims3.genewiz.com/'>Genewiz website</a>,\" +\n                \" login with lab account (Username: mnparks@uw.edu, password is the\" +\n                \" lab general password).\"\n          note \"\\nThe 'Recent Results' table shows which sequencing data is available for download.\"\n          \n          image \"Genewiz_AvailableTrackingNumberTable\"\n          \n          tracking_nums.each do |t|\n              select [\"Yes\", \"No\"], var: \"#{t}\", label: \"   Is sequencing result #{t} available?\"\n          end\n        end\n\n# DEBUG: display choices\n        if debug\n            show do\n                title \"DEBUG: Sequencing result choices\"\n                tracking_nums.each do |t|\n                    sequencing_results[\"#{t}\".to_sym] = ['Yes', 'No'].sample\n                end\n                note \"#{sequencing_results}\"\n            end\n        end\n    \n    # TODO: get tracking_numbers that are ready\n        ready_hash = sequencing_results.select { |t| sequencing_results[\"#{t}\".to_sym] == 'Yes' }\n\n        tracking_nums = ready_hash.keys\n\n# DEBUG: Display selections\n        show do\n            title \"DEBUG ONLY: Ready Selections:\"\n            ready_hash.each do |key, value|\n                note \"#{key} #{value}\"\n            end\n        end\n    \n# DEBUG: Display ready tracking numbers\n        # debug only: delete after drafts\n        if debug\n            show do\n                title \"DEBUG: Ready tracking numbers\"\n                tracking_nums.each do |t|\n                    note \"Tracking number: #{t}\"\n                end\n            end\n        end\n    \n    # TODO: gather ready opearations\n        operations.each do |op|\n            t = op.input_data input_name, :tracking_num\n            unless ready_hash.include? \"#{t}\".to_sym\n                op.set_status \"error\"\n                op.associate :results_not_ready, \"The sequencing results are not ready.\"\n            else\n                op.associate :results_ready, \"The sequencing results are ready.\"\n            end\n        end\n        \n# DEBUG: Display running operations\n        show do\n            title \"DEBUG ONLY: running operations that will be made\"\n            table operations.running.start_table\n                .input_item(input_name)\n                .input_sample(input_name)\n                .custom_column(heading: \"Tracking Number\") { |op| op.input_data input_name, :tracking_num }\n                .end_table\n        \n        end\n    \n    # TODO: End task if no tracking numbers are available\n        unless tracking_nums.any?\n            show do\n                title \"There are no tracking numbers available.\"\n                note \"There is nothing else to do.\"\n                operations.store(io: \"input\")\n                            .store(io: \"output\") \n    \n                return {}\n            end\n        end\n        \n        operations.running.make\n        \n    # TODO: Download all selected trace files (not download all sequenc efiles), upload to Aquarium\n        sequencing_uploads_zip = show do\n          title \"Download Genewiz Sequencing Results zip file\"\n          image \"DownloadSelectedTraceFiles\"\n          note \"Click the button <b>'Download All Selected Trace Files'</b> (<b>not</b> 'Download All Sequence Files') to download zip files.\"\n          tracking_nums.each_with_index do |t,i|\n              unless i == 0\n                note \"Click the back button.\"\n              end\n              note \"Click #{t} in the tracking number column.\"\n              note \"Download the #{t}-XX...XX.zip file\"\n              check \"Upload the  #{t}-XX...XX.zip file here\"\n              upload var: \"sequencing_results\"\n          end\n        end\n    \n    # TODO: unzip the files and upload all the ab1 files\n        sequencing_uploads = show do\n            title \"Unzip and upload individual sequencing results\"\n            tracking_nums.each do |t|\n                note \"Unzip/Extract the downloaded zip file named #{t}_ab1.zip.\"\n                note \"Navigate to the unzipped folder #{t}\"\n                note \"Upload all files in unzipped folder below\"\n                note \"Press Command + A (Mac) or Ctrl + A (Windows) to select all files.\"\n                note \"Wait until all uploads finish (a number appears at the end of the file name.\"\n                upload var: \"sequencing_results\"\n            end\n            # note \"HELP <b>Unzipping</b>: If you are on a Windows machine, right click the zip file, click Extract All, then click Extract.\"\n        end\n    \n    # TODO: associate tracking number data to operation\n    # TODO: associate tracking number, zip files to item\n    # TODO: associate primer to item\n    upload_zip_id = sequencing_uploads_zip[:sequencing_results][0][:id]\n    upload_zip = Upload.find(upload_zip_id)\n    batched_sequencing_result_url = \"<a href=#{upload_zip.url}>#{upload_zip.name}</a>\".html_safe\n    \n    # tracking_nums.each do |t|\n    #     op = num_to_op_hash[\"#{t}\".to_sym]\n    #     op.associate :notify, \"[Data] The batched sequencing results is here #{batched_sequencing_result_url}.\"\n    #     sequencing_uploads[:sequencing_results].each do |result|\n    #         upload = Upload.find(result[:id])\n    #         sequencing_result_url = \"<a href=#{upload.url}>#{upload.name}</a>\".html_safe\n    #         op.notify \"[Data] Sequencing data can be accessed here #{sequencing_result_url}\"\n    #     end\n    # end\n    \n    \n        #     # Set tasks in the io_hash to be results back\n    #     io_hash[:task_ids].each do |tid|\n    #       task = find(:task, id: tid)[0]\n    #       set_task_status(task,\"results back\")\n    #       if task.task_prototype.name == \"Sequencing Verification\"\n    #         # batched file notif link\n    #         begin\n    #         upload_zip_id = sequencing_uploads_zip[:sequencing_results][0][:id]\n    #         upload_zip = Upload.find(upload_zip_id)\n    #         batched_sequencing_result_url = \"<a href=#{upload_zip.url}>#{upload_zip.name}</a>\".html_safe\n    #         task.notify \"[Data] The batched sequencing results is here #{batched_sequencing_result_url}.\", job_id: jid\n    #         # individual file link\n    #         plasmid_stock_id = task.simple_spec[:plasmid_stock_ids][0]\n    #         sequencing_uploads[:sequencing_results].each do |result|\n    #           if result[:name].include? plasmid_stock_id.to_s\n    #             upload = Upload.find(result[:id])\n    #             sequencing_result_url = \"<a href=#{upload.url}>#{upload.name}</a>\".html_safe\n    #             task.notify \"[Data] Sequencing data can be accessed here #{sequencing_result_url}\", job_id: jid\n    #           end\n    #         end\n    #         rescue\n    #         end\n    #       end\n    #     end\n    \n    # operations.each do |op|\n    #   op.associate :notify, \"this is some test message\"\n    # end\n    \n    finish_protocol()\n    \n  end\n\nend\n\n\n# def arguments\n#     {\n#       io_hash: {},\n#       tracking_num: \"10-306533836\",\n#       sequencing_verification_task_ids: [4090,4089,4088,4087,4062,4061],\n#       task_ids: [3947,3948,3949,3950,3951,3952,3953,3954,3955,3956,3957,3958,3960,3963,3969,3972,3973,3969,3972,3973],\n#       sequencing_task_ids: [],\n#       debug_mode: \"No\"\n#     }\n#   end\n\n#   def main\n#     io_hash = input[:io_hash]\n#     io_hash = input if input[:io_hash].empty?\n#     # re define the debug function based on the debug_mode input\n#     io_hash = { sequencing_verification_task_ids: [], sequencing_task_ids: [], task_ids: [], debug_mode: \"No\", order_date: \"\" }.merge io_hash\n#     if io_hash[:debug_mode].downcase == \"yes\"\n#       def debug\n#         true\n#       end\n#     end\n\n#     show {\n#       note \"#{io_hash}\"\n#     } if io_hash[:debug_mode].downcase == \"yes\"\n\n\n# TODO: collect tracking numbers\n\n#     tracking_num = io_hash[:tracking_num]\n\n# TODO: login to website\n# TODO: check if tracking numbers are ready\n\n#     results_info = show {\n#       title \"Check if Sequencing results arrived?\"\n#       check \"Go the Genewiz website, log in with lab account (Username: mnparks@uw.edu, password is the lab general password).\"\n#       note \"In Recent Results table, click Tracking Number #{tracking_num}, and check if the sequencing results have shown up yet.\"\n#       select [\"Yes\", \"No\"], var: \"results_back_or_not\", label: \"Do the sequencing results show up?\"\n#     }\n\n# TODO: raise exception if nothing is ready\n\n#     raise \"The sequencing results have not shown up yet.\" if results_info[:results_back_or_not] == \"No\"\n\n# TODO: Download all selected trace files (not download all sequenc efiles), upload to Aquarium\n\n# TODO: unzip the files and upload all the ab1 files\n\n# TODO: associate tracking number data to operation\n# TODO: associate tracking number, item number, primer to sequencing result\n# TODO: notify user of sequencing data (sample name, item number, primer used) and location of file as a url\n\n#     sequencing_uploads_zip = show {\n#       title \"Upload Genewiz Sequencing Results zip file\"\n#       note \"Click the button 'Download All Selected Trace Files' (Not Download All Sequence Files), which should download a zip file named #{tracking_num}-some-random-number.zip.\"\n#       note \"Upload the #{tracking_num}_ab1.zip file here.\"\n#       upload var: \"sequencing_results\"\n#     }\n#     sequencing_uploads = show {\n#       title \"Upload individual sequencing results\"\n#       note \"Unzip the downloaded zip file named #{tracking_num}_ab1.zip.\"\n#       note \"If you are on a Windows machine, right click the #{tracking_num}-some-random-number.zip file, click Extract All, then click Extract.\"\n#       note \"Upload all the unzipped ab1 file below by navigating to the upzipped folder.\"\n#       note \"You can click Command + A on Mac or Ctrl + A on Windows to select all files.\"\n#       note \"Wait until all the uploads finished (a number appears at the end of file name). \"\n#       upload var: \"sequencing_results\"\n#     }\n#     # show {\n#     #   note sequencing_uploads[:sequencing_results].to_json\n#     # }\n#     io_hash[:task_ids].concat io_hash[:sequencing_verification_task_ids] if io_hash[:sequencing_verification_task_ids].length > 0\n\n#     # Set tasks in the io_hash to be results back\n#     io_hash[:task_ids].each do |tid|\n#       task = find(:task, id: tid)[0]\n#       set_task_status(task,\"results back\")\n#       if task.task_prototype.name == \"Sequencing Verification\"\n#         # batched file notif link\n#         begin\n#         upload_zip_id = sequencing_uploads_zip[:sequencing_results][0][:id]\n#         upload_zip = Upload.find(upload_zip_id)\n#         batched_sequencing_result_url = \"<a href=#{upload_zip.url}>#{upload_zip.name}</a>\".html_safe\n#         task.notify \"[Data] The batched sequencing results is here #{batched_sequencing_result_url}.\", job_id: jid\n#         # individual file link\n#         plasmid_stock_id = task.simple_spec[:plasmid_stock_ids][0]\n#         sequencing_uploads[:sequencing_results].each do |result|\n#           if result[:name].include? plasmid_stock_id.to_s\n#             upload = Upload.find(result[:id])\n#             sequencing_result_url = \"<a href=#{upload.url}>#{upload.name}</a>\".html_safe\n#             task.notify \"[Data] Sequencing data can be accessed here #{sequencing_result_url}\", job_id: jid\n#           end\n#         end\n#         rescue\n#         end\n#       end\n#     end\n\n#     return { io_hash: io_hash }\n#   end # main\n# end # Protocol","cost_model":"def cost(op)\n  { labor: 0, materials: 0 }\nend","documentation":"Upload Sequencing\n===\n\nThis protocol takes in a Sequencing Reaction (from a Fragment or Plasmid) and produces a Sequencing Result (Fragment or Plasmid)\n\n\nDocumentation here"}