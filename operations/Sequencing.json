{"name":"Sequencing","category":"Cloning","deployed":false,"on_the_fly":false,"field_types":[{"role":"input","name":"Plasmid","sample_types":["Plasmid"],"object_types":["Plasmid Stock"],"part":false,"array":false},{"role":"output","name":"Plasmid","sample_types":["Plasmid"],"object_types":["Sequencing Stripwell"],"part":true,"array":false},{"role":"input","name":"Sequencing Primers","sample_types":["Primer"],"object_types":["Primer Aliquot"],"part":false,"array":true}],"protocol":"class Protocol\r\n\r\n  def main\r\n\r\n    operations.retrieve interactive: false\r\n    \r\n    # input check\r\n    unless debug\r\n      operations.each do |op|\r\n        if !op.input_data(\"Plasmid\", :concentration)\r\n          op.set_status \"error\"\r\n          op.associate :missing_data, \"Your plasmid has no listed concentration.\"\r\n        end\r\n      end\r\n    end\r\n\r\n    # calculate volumes based on Genewiz guide\r\n    ng_by_length_plas = [500.0, 800.0, 1000.0].zip [6000, 10000]\r\n    ng_by_length_frag = [10.0, 20.0, 40.0, 60.0, 80.0].zip [500, 1000, 2000, 4000]\r\n    \r\n    operations.each do |op|\r\n      stock = op.input(\"Plasmid\").child_item\r\n      length = stock.sample.properties[\"Length\"]\r\n      conc = stock.get(:concentration) || rand(300) / 300\r\n      conc = rand(4000..6000) / 10.0 if debug\r\n      \r\n      ng_by_length = stock.sample.sample_type.name == \"Plasmid\" ? ng_by_length_plas : ng_by_length_frag\r\n      plas_vol = ng_by_length_plas.find { |ng_l| ng_l[1].nil? ? true : length < ng_l[1] }[0] / conc\r\n      plas_vol = plas_vol < 0.5 ? 0.5 : plas_vol > 12.5 ? 12.5 : plas_vol\r\n      \r\n      water_vol_rounded = (((12.5 - plas_vol) / 0.2).floor * 0.2).round(1)\r\n      plas_vol_rounded = ((plas_vol / 0.2).ceil * 0.2).round(1)\r\n      primer_vol_rounded = 2.5\r\n      \r\n      op.temporary[:water_vol] = water_vol_rounded\r\n      op.temporary[:stock_vol] = plas_vol_rounded\r\n      op.temporary[:primer_vol] = primer_vol_rounded\r\n    end\r\n    \r\n    # volume check\r\n    show do\r\n      title \"Ensure plasmid stocks contain enough volume for the reaction\"\r\n      \r\n      table operations.start_table\r\n        .input_item(\"Plasmid\")\r\n        .custom_column(heading: \"Required volume (µL)\") { |op| op.temporary[:stock_vol] }\r\n        .get(:enough_volume, type: \"string\", default: 'y', heading: \"Enough volume (y/n)?\")\r\n        .end_table\r\n    end\r\n    \r\n    operations.each do |op|\r\n      if op.temporary[:enough_stock_volume].downcase == \"n\"\r\n        op.set_status \"error\"\r\n        op.associate :not_enough_volume, \"Your plasmid stock did not have enough volume. Please make another!\"\r\n      end\r\n    end\r\n    \r\n    operations.retrieve\r\n              .make\r\n    \r\n    # label stripwells\r\n    stripwells = [operations.output_collections[\"Plasmidd\"]]\r\n    show do\r\n      title \"Prepare stripwells for sequencing reaction\"\r\n      \r\n      stripwells.each_with_index do |sw, idx|\r\n        if idx < stripwells.length - 1\r\n          check \"Label the first well of an unused stripwell with MP#{idx * 12 + 1} and last\r\n                 well with MP#{idx * 12 + 12}\"\r\n        else\r\n          number_of_wells = operations.length - idx * 12\r\n          check \"Prepare a #{number_of_wells}-well stripwell, and label the first well with \r\n                 MP#{idx * 12 + 1} and the last well with MP#{operations.length}\"\r\n        end\r\n      end\r\n    end\r\n    \r\n    # load stripwells with molecular grade water\r\n    show do\r\n      title \"Load stripwells #{stripwells.map { |sw| sw.id }.join(\", \")} with molecular grade water\"\r\n      \r\n      stripwells.each_with_index do |sw, idx|\r\n        note \"Stripwell #{idx + 1}\"\r\n        table operations.start_table\r\n          .output_row(\"Plasmidd\", heading: \"Well\")\r\n          .custom_column(heading: \"Molecular Grade Water (µL)\", checkable: true) { |op| op.temporary[:water_vol] }\r\n          .end_table\r\n      end\r\n    end\r\n    \r\n    # load stripwells with stock\r\n    show do\r\n      title \"Load stripwells #{stripwells.map { |sw| sw.id }.join(\", \")} with plasmid stock\"\r\n      \r\n      stripwells.each_with_index do |sw, idx|\r\n        note \"Stripwell #{idx + 1}\"\r\n        table operations.start_table\r\n          .output_row(\"Plasmidd\", heading: \"Well\")\r\n          .input_item(\"Plasmid\", heading: \"Stock\")\r\n          .custom_column(heading: \"Volume (µL)\", checkable: true) { |op| op.temporary[:stock_vol] }\r\n          .end_table\r\n      end\r\n    end\r\n    \r\n    # load stripwells with primer\r\n    show do\r\n      title \"Load stripwells #{stripwells.map { |sw| sw.id }.join(\", \")} with \"\r\n      \r\n      stripwells.each_with_index do |sw, idx|\r\n        note \"Stripwell #{idx + 1}\"\r\n        table operations.start_table\r\n          .output_row(\"Plasmidd\", heading: \"Well\")\r\n          .input_item(\"Sequencing Primer\", heading: \"Primer Aliquot\")\r\n          .custom_column(heading: \"Volume (µL)\", checkable: true) { |op| op.temporary[:primer_vol] }\r\n          .end_table\r\n      end\r\n    end\r\n    \r\n    operations.store\r\n    \r\n    # create Genewiz order\r\n    genewiz = show do\r\n      title \"Create a Genewiz order\"\r\n      \r\n      check \"Go the <a href='https://clims3.genewiz.com/default.aspx' target='_blank'>GENEWIZ website</a>, log in with lab account (Username: mnparks@uw.edu, password is the lab general password).\"\r\n      check \"Click Create Sequencing Order, choose Same Day, Online Form, Pre-Mixed, #{operations.running.length} samples, then Create New Form\"\r\n      check \"Enter DNA Name and My Primer Name according to the following table, choose DNA Type to be Plasmid\"\r\n      \r\n      table operations.start_table\r\n        .custom_column(heading: \"DNA Name\") { |op| \r\n          stock = op.input(\"Plasmid\").child_item\r\n          \"#{stock.id}-#{stock.sample.user.name}\"\r\n        }\r\n        .custom_column(heading: \"DNA Type\") { |op| op.input(\"Plasmid\").child_sample.sample_type.name == \"Plasmid\" ? \"Plasmid\" : \"Purified PCR\" }\r\n        .custom_column(heading: \"DNA Length\") { |op| op.input(\"Plasmid\").child_sample.properties[\"Length\"] }\r\n        .custom_column(heading: \"My Primer Name\") { |op| op.input(\"Sequencing Primer\").child_sample.id }\r\n        .end_table\r\n      \r\n      check \"Click Save & Next, Review the form and click Next Step\"\r\n      check \"Enter Quotation Number MS0721101, click Next Step\"\r\n      check \"Print out the form and enter the Genewiz tracking number below.\"\r\n      get \"text\", var: \"tracking_num\", label: \"Enter the Genewiz tracking number\", default: \"10-277155539\"\r\n    end\r\n\r\n    # store stripwells in dropbox\r\n    show {\r\n      title \"Put all stripwells in the Genewiz dropbox\"\r\n      check \"Cap all of the stripwells.\"\r\n      check \"Wrap the stripwells in parafilm.\"\r\n      check \"Put the stripwells into a zip-lock bag along with the printed Genewiz order form.\"\r\n      check \"Ensure that the bag is sealed, and put it into the Genewiz dropbox.\"\r\n    }\r\n    \r\n    # save order data in stripwells\r\n    order_date = Time.now.strftime(\"%-m/%-d/%y %I:%M:%S %p\")\r\n    operations.each do |op|\r\n      op.set_output_data \"Plasmid\", :tracking_num, genewiz[:tracking_num]\r\n      op.set_output_data \"Plasmid\", :order_date, order_date\r\n    end\r\n    \r\n    return {}\r\n\r\n  end\r\nend","cost_model":"# Sequencing Cost Model\n\ndef cost(op)\n  if op.status == 'error'\n    { labor: 0, materials: 0 }\n  else\n    { labor: 1, materials: 1 }\n  end\nend","documentation":"Sequencing\n===\n\n- TODO find volumes for sequencing reactions\n\n- TODO ensure there is enough of each stock for each reaction\n\n- TODO grab the necessary stripwells\n\n- TODO pipette water, plasmid, and primer into stripwells\n\n- TODO return all items\n\n- TODO upload order to Genewiz\n\n- TODO put stripwells in Genewiz dropbox"}